{"name":"uCModules.json","topic":"uCModules","sections":[{"section":"Overview","entries":[{"data":["<p>uCModules is a set of libraries for microcontrollers that supplies a number of functions useful for creating small devices that can be interacted with.  It's greatest feature is the ability to deal with large numbers of buttons, LEDs, and knobs without clogging up the main program file.  It also supplies a few other libraries that may or may not be useful depending on architecture.</p>",""],"entry":"Purpose"},{"data":["<h4>Stand-alone libraries:</h4>","<ul>","<li>CircularBuffer.h</li>","<li>flagMessanging.h</li>","<li>timeKeeper.h</li>","<li>timeKeeper32.h</li>","<li>timerModule.h</li>","<li>timerModule32.h</li>","</ul>","","<h4>Panel related libraries:</h4>","<ul>","<li>HardwareInterfaces.h</li>","<li>PanelComponents.h</li>","<li>PanelDataObjects.h</li>","<li>Panel.h</li>","</ul>"],"entry":"Contents"},{"data":["<p>uCModules can be found on github: <a href=\"https://github.com/marshalltaylorSFE/uCModules\">https://github.com/marshalltaylorSFE/uCModules</a></p>","","<p>Clone the repo, or <a href=\"https://github.com/marshalltaylorSFE/uCModules/archive/master.zip\">download as zip</a>, and place in Arduino's workspace libraries folder.</p>"],"entry":"Installation"},{"data":["See examples for usage"],"entry":"Usage"}]},{"section":"Using Panel Components","entries":[{"data":["<p>","<img src=\"assets/explorer-libraries/ClassDiagramsDataObjects.jpg\">","</p>","<p>"," <img src=\"assets/explorer-libraries/ClassDiagramsHardwareDescriptions.jpg\"> ","</p>","<p>"," <img src=\"assets/explorer-libraries/ClassDiagramsPanelComponents.jpg\"> ","</p>","<p>"," <img src=\"assets/explorer-libraries/ClassDiagramsPanels.jpg\"> ","</p>"],"entry":"Class Diagrams"}]},{"section":"CircularBuffer","entries":[{"data":["<p>This is a simple circular buffer.  It is a template for convenience.</p>","","<h3>Usage</h3>","<p>To use, include the header and create an object of the required type, and of the size needed.</p>","<pre>","#include &lt;CircularBuffer.h&gt;","","CircularBuffer<int> cBuffer(10)","</pre>","<p>This creates a global buffer of 10 integers</p>"],"entry":"Overview"},{"data":["<h3>Description</h3>","<p>Construct a buffer object with number of elements</p>","<pre>CircularBuffer<T>( uint8_t inputDepth )</pre>","<h3>Parameters</h3>","<ul>","<li>","<i>uint8_t inputDepth</i> -- set the depth of the buffer.","</li>","</ul>"],"entry":"CircularBuffer<T>(...)"},{"data":["<h3>Description</h3>","<pre>read( uint8_t inputDepth )</pre>","<h3>Parameters</h3>","<ul>","<li>","<i>uint8_t inputDepth</i> -- Read into the buffer some depth.  Reading 0 results in the most recent addition.  Reading too deep will clamp at the oldest element.","</li>","</ul>","<h3>Return</h3>","<ul>","<li>","<i>T</i> -- Returns object of template type.","</li>","</ul>"],"entry":"read(...)"},{"data":["<h3>Description</h3>","<p>Write a new object to the buffer.  If the buffer is full, old data will be deleted.","<pre>void write( T inputData )</pre>","<h3>Parameters</h3>","<ul>","<li>","<i>T inputData</i> -- Pass element to add.","</li>","</ul>","<h3>Return</h3>","<ul>","<li>","<i>void</i>","</li>","</ul>"],"entry":"write(...)"},{"data":["<h3>Description</h3>","<p>Remove all elements from the buffer</p>","<pre>void clear( void )</pre>","<h3>Parameters</h3>","<ul>","<li>","<i>void</i> -- Description","</li>","</ul>","<h3>Return</h3>","<ul>","<li>","<i>void</i>","</li>","</ul>"],"entry":"clear(...)"}]}]}